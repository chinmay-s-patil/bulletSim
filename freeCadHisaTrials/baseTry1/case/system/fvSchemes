/*--------------------------------*- C++ -*----------------------------------*\
|                                                                             |
|                Generated by the CfdOF workbench for FreeCAD                 |
|                      https://github.com/jaheyns/CfdOF                       |
|                                                                             |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

fluxScheme          AUSMPlusUp;

ddtSchemes
{
    default         dualTime rPseudoDeltaT backward;
}

divSchemes
{
    // Use second-order accurate convection
    div(phi,k)     Gauss limitedLinear 1;
    div(tauMC)      Gauss linear;
    div(yPhi,yWall) Gauss linearUpwind grad(yWall);
}

gradSchemes
{
    // Limit gradient to improve stability when bad cells encountered
    // (0 = no limiting; 1 = do not exceed surrounding cells)
    default         cellLimited faceLeastSquares linear 0.6;
    gradTvd         cellLimited faceLeastSquares linear 0.6;
}

laplacianSchemes
{
    // Limited explicit correction to the surface normal gradient,
    // for stability in highly non-orthogonal cells.
    // (0 = uncorrected, fully implicit; 1 = full correction)
    default                     Gauss linear corrected;
    laplacian(muEff,U)          Gauss linear compact;
    laplacian(alphaEff,e)       Gauss linear compact;
    laplacian(yPsi)             Gauss linear corrected;
}

interpolationSchemes
{
    default         linear;
    reconstruct(rho) wVanLeer gradTvd;
    reconstruct(U)   wVanLeer gradTvd;
    reconstruct(T)   wVanLeer gradTvd;
}

snGradSchemes
{
    // Limited explicit correction to the surface normal gradient,
    // for stability in highly non-orthogonal cells.
    // (0 = uncorrected, fully implicit; 1 = full correction)
    default         limited 0.3;
}

wallDist
{
    method meshWave;
}


// ************************************************************************* //
